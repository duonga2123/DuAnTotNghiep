<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<!-- Boxicons -->
	<link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
	<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<!-- My CSS -->
	<title>AdminMangaLand</title>
	<style>
		@import url('https://fonts.googleapis.com/css2?family=Lato:wght@400;700&family=Poppins:wght@400;500;600;700&display=swap');

		* {
			margin: 0;
			padding: 0;
			box-sizing: border-box;
		}

		a {
			text-decoration: none;
		}

		li {
			list-style: none;
		}

		:root {
			--poppins: 'Poppins', sans-serif;
			--lato: 'Lato', sans-serif;

			--light: #F9F9F9;
			--blue: #3C91E6;
			--light-blue: #CFE8FF;
			--grey: #eee;
			--dark-grey: #AAAAAA;
			--dark: #342E37;
			--red: #DB504A;
			--yellow: #FFCE26;
			--light-yellow: #FFF2C6;
			--orange: #FD7238;
			--light-orange: #FFE0D3;
		}

		html {
			overflow-x: hidden;
		}

		body.dark {
			--light: #0C0C1E;
			--grey: #060714;
			--dark: #FBFBFB;
		}

		body {
			background: var(--grey);
			overflow-x: hidden;
		}

		/* SIDEBAR */
		#sidebar {
			position: fixed;
			top: 0;
			left: 0;
			width: 280px;
			height: 100%;
			background: var(--light);
			z-index: 2000;
			font-family: var(--lato);
			transition: .3s ease;
			overflow-x: hidden;
			scrollbar-width: none;
		}

		#sidebar::--webkit-scrollbar {
			display: none;
		}

		#sidebar.hide {
			width: 60px;
		}

		#sidebar .brand {
			font-size: 24px;
			font-weight: 700;
			height: 56px;
			display: flex;
			align-items: center;
			color: var(--blue);
			position: sticky;
			top: 0;
			left: 0;
			background: var(--light);
			z-index: 500;
			padding-bottom: 20px;
			box-sizing: content-box;
		}

		#sidebar .brand .bx {
			min-width: 60px;
			display: flex;
			justify-content: center;
		}

		#sidebar .side-menu {
			width: 100%;
			margin-top: 48px;
		}

		#sidebar .side-menu li {
			height: 48px;
			background: transparent;
			margin-left: 6px;
			border-radius: 48px 0 0 48px;
			padding: 4px;
		}

		#sidebar .side-menu li.active {
			background: var(--grey);
			position: relative;
		}

		#sidebar .side-menu li.active::before {
			content: '';
			position: absolute;
			width: 40px;
			height: 40px;
			border-radius: 50%;
			top: -40px;
			right: 0;
			box-shadow: 20px 20px 0 var(--grey);
			z-index: -1;
		}

		#sidebar .side-menu li.active::after {
			content: '';
			position: absolute;
			width: 40px;
			height: 40px;
			border-radius: 50%;
			bottom: -40px;
			right: 0;
			box-shadow: 20px -20px 0 var(--grey);
			z-index: -1;
		}

		#sidebar .side-menu li a {
			width: 100%;
			height: 100%;
			background: var(--light);
			display: flex;
			align-items: center;
			border-radius: 48px;
			font-size: 16px;
			color: var(--dark);
			white-space: nowrap;
			overflow-x: hidden;
		}

		#sidebar .side-menu.top li.active a {
			color: var(--blue);
		}

		#sidebar.hide .side-menu li a {
			width: calc(48px - (4px * 2));
			transition: width .3s ease;
		}

		#sidebar .side-menu li a.logout {
			color: var(--red);
		}

		#sidebar .side-menu.top li a:hover {
			color: var(--blue);
		}

		#sidebar .side-menu li a .bx {
			min-width: calc(60px - ((4px + 6px) * 2));
			display: flex;
			justify-content: center;
		}

		/* SIDEBAR */

		/* CONTENT */
		#content {
			position: relative;
			width: calc(100% - 280px);
			left: 280px;
			transition: .3s ease;
		}

		#sidebar.hide~#content {
			width: calc(100% - 60px);
			left: 60px;
		}

		/* NAVBAR */
		#content nav {
			height: 56px;
			background: var(--light);
			padding: 0 24px;
			display: flex;
			align-items: center;
			grid-gap: 24px;
			font-family: var(--lato);
			position: sticky;
			top: 0;
			left: 0;
			z-index: 1000;
		}

		#content nav::before {
			content: '';
			position: absolute;
			width: 40px;
			height: 40px;
			bottom: -40px;
			left: 0;
			border-radius: 50%;
			box-shadow: -20px -20px 0 var(--light);
		}

		#content nav a {
			color: var(--dark);
		}

		#content nav .bx.bx-menu {
			cursor: pointer;
			color: var(--dark);
		}

		#content nav .nav-link {
			font-size: 16px;
			transition: .3s ease;
		}

		#content nav .nav-link:hover {
			color: var(--blue);
		}

		#content nav form {
			max-width: 400px;
			width: 100%;
			margin-right: auto;
		}

		#content nav form .form-input {
			display: flex;
			align-items: center;
			height: 36px;
		}

		#content nav form .form-input input {
			flex-grow: 1;
			padding: 0 16px;
			height: 100%;
			border: none;
			background: var(--grey);
			border-radius: 36px 0 0 36px;
			outline: none;
			width: 100%;
			color: var(--dark);
		}

		#content nav form .form-input button {
			width: 36px;
			height: 100%;
			display: flex;
			justify-content: center;
			align-items: center;
			background: var(--blue);
			color: var(--light);
			font-size: 18px;
			border: none;
			outline: none;
			border-radius: 0 36px 36px 0;
			cursor: pointer;
		}

		#content nav .notification {
			font-size: 20px;
			position: relative;
		}

		#content nav .notification .num {
			position: absolute;
			top: -6px;
			right: -6px;
			width: 20px;
			height: 20px;
			border-radius: 50%;
			border: 2px solid var(--light);
			background: var(--red);
			color: var(--light);
			font-weight: 700;
			font-size: 12px;
			display: flex;
			justify-content: center;
			align-items: center;
		}

		#content nav .profile img {
			width: 36px;
			height: 36px;
			object-fit: cover;
			border-radius: 50%;
		}

		#content nav .switch-mode {
			display: block;
			min-width: 50px;
			height: 25px;
			border-radius: 25px;
			background: var(--grey);
			cursor: pointer;
			position: relative;
		}

		#content nav .switch-mode::before {
			content: '';
			position: absolute;
			top: 2px;
			left: 2px;
			bottom: 2px;
			width: calc(25px - 4px);
			background: var(--blue);
			border-radius: 50%;
			transition: all .3s ease;
		}

		#content nav #switch-mode:checked+.switch-mode::before {
			left: calc(100% - (25px - 4px) - 2px);
		}

		#content main {
			width: 100%;
			padding: 36px 24px;
			font-family: var(--poppins);
			max-height: calc(100vh - 56px);
			overflow-y: auto;
		}

		#content main .head-title {
			display: flex;
			align-items: center;
			justify-content: space-between;
			grid-gap: 16px;
			flex-wrap: wrap;
		}

		#content main .head-title .left h1 {
			font-size: 36px;
			font-weight: 600;
			margin-bottom: 10px;
			color: var(--dark);
		}

		#content main .head-title .left .breadcrumb {
			display: flex;
			align-items: center;
			grid-gap: 16px;
		}

		#content main .head-title .left .breadcrumb li {
			color: var(--dark);
		}

		#content main .head-title .left .breadcrumb li a {
			color: var(--dark-grey);
			pointer-events: none;
		}

		#content main .head-title .left .breadcrumb li a.active {
			color: var(--blue);
			pointer-events: unset;
		}

		#content main .head-title .btn-download {
			height: 36px;
			padding: 0 16px;
			border-radius: 36px;
			background: var(--blue);
			color: var(--light);
			display: flex;
			justify-content: center;
			align-items: center;
			grid-gap: 10px;
			font-weight: 500;
		}

		#content main .box-info {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
			grid-gap: 24px;
			margin-top: 36px;
		}

		#content main .box-info li {
			padding: 24px;
			background: var(--light);
			border-radius: 20px;
			display: flex;
			align-items: center;
			grid-gap: 24px;
		}

		#content main .box-info li .bx {
			width: 80px;
			height: 80px;
			border-radius: 10px;
			font-size: 36px;
			display: flex;
			justify-content: center;
			align-items: center;
		}

		#content main .box-info li:nth-child(1) .bx {
			background: var(--light-blue);
			color: var(--blue);
		}

		#content main .box-info li:nth-child(2) .bx {
			background: var(--light-yellow);
			color: var(--yellow);
		}

		#content main .box-info li:nth-child(3) .bx {
			background: var(--light-orange);
			color: var(--orange);
		}

		#content main .box-info li .text h3 {
			font-size: 24px;
			font-weight: 600;
			color: var(--dark);
		}

		#content main .box-info li .text p {
			color: var(--dark);
		}

		#content main .table-data {
			display: flex;
			flex-wrap: wrap;
			grid-gap: 24px;
			margin-top: 24px;
			width: 100%;
			color: var(--dark);
		}

		#content main .table-data>div {
			border-radius: 20px;
			background: var(--light);
			padding: 24px;
			overflow-x: auto;
		}

		#content main .table-data .head {
			display: flex;
			align-items: center;
			grid-gap: 16px;
			margin-bottom: 24px;
		}

		#content main .table-data .head h3 {
			margin-right: auto;
			font-size: 24px;
			font-weight: 600;
		}

		#content main .table-data .head .bx {
			cursor: pointer;
		}

		#content main .table-data .order {
			flex-grow: 1;
			flex-basis: 500px;
		}

		#content main .table-data .order table {
			width: 100%;
			border-collapse: collapse;
		}

		#content main .table-data .order table th {
			padding-bottom: 12px;
			font-size: 13px;
			text-align: left;
			border-bottom: 1px solid var(--grey);
		}

		#content main .table-data .order table td {
			padding: 16px 0;
		}

		#content main .table-data .order table tr td:first-child {
			display: flex;
			align-items: center;
			grid-gap: 12px;
			padding-left: 6px;
		}

		#content main .table-data .order table td img {
			width: 36px;
			height: 36px;
			border-radius: 50%;
			object-fit: cover;
		}

		#content main .table-data .order table tbody tr:hover {
			background: var(--grey);
		}

		#content main .table-data .order table tr td .status {
			font-size: 10px;
			padding: 6px 16px;
			color: var(--light);
			border-radius: 20px;
			font-weight: 700;
		}

		#content main .table-data .order table tr td .status.completed {
			background: var(--blue);
		}

		#content main .table-data .order table tr td .status.process {
			background: var(--yellow);
		}

		#content main .table-data .order table tr td .status.pending {
			background: var(--orange);
		}


		#content main .table-data .todo {
			flex-grow: 1;
			flex-basis: 300px;
		}

		#content main .table-data .todo .todo-list {
			width: 100%;
		}

		#content main .table-data .todo .todo-list li {
			width: 100%;
			margin-bottom: 16px;
			background: var(--grey);
			border-radius: 10px;
			padding: 14px 20px;
			display: flex;
			justify-content: space-between;
			align-items: center;
		}

		#content main .table-data .todo .todo-list li .bx {
			cursor: pointer;
		}

		#content main .table-data .todo .todo-list li.completed {
			border-left: 10px solid var(--blue);
		}

		#content main .table-data .todo .todo-list li.not-completed {
			border-left: 10px solid var(--orange);
		}

		#content main .table-data .todo .todo-list li:last-child {
			margin-bottom: 0;
		}

		/* MAIN */
		/* CONTENT */

		@media screen and (max-width: 768px) {
			#sidebar {
				width: 200px;
			}

			#content {
				width: calc(100% - 60px);
				left: 200px;
			}

			#content nav .nav-link {
				display: none;
			}
		}

		@media screen and (max-width: 576px) {
			#content nav form .form-input input {
				display: none;
			}

			#content nav form .form-input button {
				width: auto;
				height: auto;
				background: transparent;
				border-radius: none;
				color: var(--dark);
			}

			#content nav form.show .form-input input {
				display: block;
				width: 100%;
			}

			#content nav form.show .form-input button {
				width: 36px;
				height: 100%;
				border-radius: 0 36px 36px 0;
				color: var(--light);
				background: var(--red);
			}

			#content nav form.show~.notification,
			#content nav form.show~.profile {
				display: none;
			}

			#content main .box-info {
				grid-template-columns: 1fr;
			}

			#content main .table-data .head {
				min-width: 420px;
			}

			#content main .table-data .order table {
				min-width: 420px;
			}

			#content main .table-data .todo .todo-list {
				min-width: 420px;
			}
		}
	</style>
</head>

<body>


	<!-- SIDEBAR -->
	<section id="sidebar">
		<a href="" class="brand">
			<i class='bx bxs-smile'></i>
			<span class="text">AdminMangaLand</span>
		</a>
		<ul class="side-menu top">
			<li class="active">
				<a href="">
					<i class='bx bxs-dashboard'></i>
					<span class="text">Dashboard</span>
				</a>
			</li>
			<li>
				<a href="#" id="userManagerLink">
					<i class='bx bxs-user'></i>
					<span class="text">User Management</span>
				</a>
			</li>
			<li>
				<a href="#" id="categoryManagerLink">
					<i class='bx bxs-category'></i>
					<span class="text">Category Manager</span>
				</a>
			</li>
			<li>
				<a id="mangaManagerLink" href="#">
					<i class='bx bxs-book-bookmark'></i>
					<span class="text">Manga Manager</span>
				</a>
			</li>
			<li>
				<a id="chapterManagerLink" href="#">
					<i class='bx bx bxs-file'></i>
					<span class="text">Chapter Manager</span>
				</a>
			</li>
			<li>
				<a id="baivietManagerLink" href="#baivietManagerLink">
					<i class='bx bxs-receipt'></i>
					<span class="text">Baiviet Manager</span>
				</a>
			</li>
			<li>
				<a href="" id="revenueManagerLink">
					<i class='bx bxs-dollar-circle'></i>
					<span class="text">Revenue Management</span>
				</a>
			</li>

		</ul>
		<ul class="side-menu">
			<li>
				<a href="#" id="setting">
					<i class='bx bxs-cog'></i>
					<span class="text">Settings</span>
				</a>
			</li>
			<li>
				<a href="/logout" class="logout">
					<i class='bx bxs-log-out-circle'></i>
					<span class="text">Logout</span>
				</a>
			</li>
		</ul>
	</section>
	<!-- SIDEBAR -->



	<!-- CONTENT -->
	<section id="content">
		<!-- NAVBAR -->
		<nav>
			<i class='bx bx-menu'></i>
			<a href="" class="nav-link">Manager</a>
			<form action="">
				<div class="form-input">
					<input type="search" placeholder="Search...">
					<button type="submit" class="search-btn"><i class='bx bx-search'></i></button>
				</div>
			</form>
			<input type="checkbox" id="switch-mode" hidden>
			<label for="switch-mode" class="switch-mode"></label>
			<a href="" id="notification" class="notification">
				<i class='bx bxs-bell'></i>
				<span class="num">8</span>
			</a>
			<a href="#" class="profile">
				<img src="data:image/jpeg;base64,{{user.avatar}}">
			</a>
		</nav>
		<!-- NAVBAR -->

		<!-- MAIN -->
		<main id="main-content">
			<div class="head-title">
				<div class="left">
					<h1>Dashboard</h1>
					<ul class="breadcrumb">
						<li>
							<a href="">Dashboard</a>
						</li>
						<li><i class='bx bx-chevron-right'></i></li>
						<li>
							<a class="active" href="#">Home</a>
						</li>
					</ul>
				</div>
			</div>

			<div class="table-data">
				<div class="order">
					<div class="head">
						<h3>Top 5 truyện nhiều lượt xem nhất</h3>
						<i class='bx bx-search'></i>
						<i class='bx bx-filter'></i>
					</div>
					<table>
						<thead>
							<tr>
								<th>Image</th>
								<th>Manganame</th>
								<th>Author</th>
								<th>View</th>
							</tr>
						</thead>
						<tbody id="manga-list">

						</tbody>
					</table>
				</div>
			</div>
		</main>
		<!-- MAIN -->
	</section>
	<!-- CONTENT -->
	<script>
		const allSideMenu = document.querySelectorAll('#sidebar .side-menu.top li a');

		allSideMenu.forEach(item => {
			const li = item.parentElement;

			item.addEventListener('click', function () {
				allSideMenu.forEach(i => {
					i.parentElement.classList.remove('active');
				})
				li.classList.add('active');
			})
		});

		const menuBar = document.querySelector('#content nav .bx.bx-menu');
		const sidebar = document.getElementById('sidebar');

		menuBar.addEventListener('click', function () {
			sidebar.classList.toggle('hide');
		})

		const searchButton = document.querySelector('#content nav form .form-input button');
		const searchButtonIcon = document.querySelector('#content nav form .form-input button .bx');
		const searchForm = document.querySelector('#content nav form');

		searchButton.addEventListener('click', function (e) {
			if (window.innerWidth < 576) {
				e.preventDefault();
				searchForm.classList.toggle('show');
				if (searchForm.classList.contains('show')) {
					searchButtonIcon.classList.replace('bx-search', 'bx-x');
				} else {
					searchButtonIcon.classList.replace('bx-x', 'bx-search');
				}
			}
		})

		if (window.innerWidth < 768) {
			sidebar.classList.add('hide');
		} else if (window.innerWidth > 576) {
			searchButtonIcon.classList.replace('bx-x', 'bx-search');
			searchForm.classList.remove('show');
		}


		window.addEventListener('resize', function () {
			if (this.innerWidth > 576) {
				searchButtonIcon.classList.replace('bx-x', 'bx-search');
				searchForm.classList.remove('show');
			}
		})

		const switchMode = document.getElementById('switch-mode');

		switchMode.addEventListener('change', function () {
			if (this.checked) {
				document.body.classList.add('dark');
			} else {
				document.body.classList.remove('dark');
			}
		})

		fetch('/top5manga')
			.then(response => response.json())
			.then(data => {
				const tbody = document.getElementById('manga-list');

				// Xóa dữ liệu cũ trong tbody
				tbody.innerHTML = '';

				// Thêm dữ liệu mới từ API vào tbody
				data.forEach(manga => {
					const row = `<tr>
                                <td>
                                <img src="${manga.image}" alt="Manga Image">
                                </td>
                                <td>${manga.manganame}</td>
                                <td>${manga.author}</td>
                                <td>${manga.view}</td>
                            </tr>`;
					tbody.innerHTML += row;
				});
			})
			.catch(error => console.error('Đã xảy ra lỗi:', error));

		const mangaManagerLink = document.getElementById('mangaManagerLink');

		mangaManagerLink.addEventListener("click", function (event) {
			event.preventDefault();
			fetch('/mangass')
				.then(response => response.text())
				.then(data => {
					const mainContent = document.querySelector("#content main");
					mainContent.innerHTML = data;
				})
				.catch(error => console.error('Đã xảy ra lỗi:', error));
		});

		const chapterManagerLink = document.getElementById('chapterManagerLink');

		chapterManagerLink.addEventListener("click", function (event) {
			event.preventDefault();
			fetch('/getchap')
				.then(response => response.text())
				.then(data => {
					const mainContent = document.querySelector("#content main");
					mainContent.innerHTML = data;
					setupChapterPage();
				})
				.catch(error => console.error('Đã xảy ra lỗi:', error));
		});


		function setupChapterPage() {
			const chapterDetailButtons = document.querySelectorAll('.detail-button');

			chapterDetailButtons.forEach(button => {
				button.addEventListener('click', function (event) {
					const chapterId = this.getAttribute('data-chapter-id');
					fetch(`/chapterchitiet/${chapterId}`)
						.then(response => response.json())
						.then(data => {
							if (data.length > 0) {
								const modalBody = document.querySelector('#image-modal .modal-body');
								modalBody.innerHTML = '';
								data.forEach(image => {
									const imgElement = document.createElement('img');
									imgElement.src = image;
									imgElement.style.width = '100px';
									imgElement.style.height = '100px';
									imgElement.style.margin = '5px';
									imgElement.style.objectFit = 'cover';
									modalBody.appendChild(imgElement);
								});
								$('#image-modal').modal('show');
							} else {
								alert('Chưa có ảnh cho chương này.');
							}
						})
						.catch(error => {
							console.error('Lỗi khi lấy dữ liệu ảnh:', error);
							alert('Đã xảy ra lỗi khi lấy dữ liệu ảnh.');
						});
				});
			});
		}

		const revenueManagerLink = document.getElementById('revenueManagerLink');

		revenueManagerLink.addEventListener("click", function (event) {
			event.preventDefault();
			fetch('/revenue')
				.then(response => response.text())
				.then(data => {
					const mainContent = document.querySelector("#content main");
					mainContent.innerHTML = data;
					updateChart();
					initializeChart()
				})
				.catch(error => console.error('Đã xảy ra lỗi:', error));
		});

		const fetchRevenueData = async (startDate, endDate) => {
			let url = '/getrevenue';
			if (startDate && endDate) {
				url += `?startDate=${startDate}&endDate=${endDate}`;
			}

			const response = await fetch(url);
			const data = await response.json();
			return data;
		};

		const updateChart = async () => {
			const startDate = document.getElementById('startDate').value;
			const endDate = document.getElementById('endDate').value;
			const data = await fetchRevenueData(startDate, endDate);

			const dates = data.map(item => item.date);
			const amounts = data.map(item => item.totalAmount);

			const ctx = document.getElementById('revenueChart').getContext('2d');

			// Phá hủy instance biểu đồ trước nếu nó tồn tại
			if (window.revenueChart) {
				window.revenueChart.destroy();
			}

			createRevenueChart(dates, amounts);
		};


		const initializeChart = async () => {
			const startDateInput = document.getElementById('startDate');
			const endDateInput = document.getElementById('endDate');

			const startDate = startDateInput ? startDateInput.value : null;
			const endDate = endDateInput ? endDateInput.value : null;
			const data = await fetchRevenueData(startDate, endDate);
			const mainContent = document.querySelector("#reve");
			const revenueChartDiv = document.createElement('div');
			revenueChartDiv.classList.add('revenue-chart');
			revenueChartDiv.innerHTML = `<canvas id="revenueChart" width="800" height="400"></canvas>`;
			mainContent.innerHTML = '';
			mainContent.appendChild(revenueChartDiv);

			const dates = data.map(item => item.date);
			const amounts = data.map(item => item.totalAmount);
			createRevenueChart(dates, amounts);
		};

		const createRevenueChart = (dates, amounts) => {
			const ctx = document.getElementById('revenueChart').getContext('2d');
			window.revenueChart = new Chart(ctx, {
				type: 'line',
				data: {
					labels: dates,
					datasets: [{
						label: 'Doanh thu',
						data: amounts,
						borderColor: 'rgb(75, 192, 192)',
						tension: 0.1
					}]
				},
				options: {
					scales: {
						y: {
							beginAtZero: true
						}
					}
				}
			});
			const totalRevenue = amounts.reduce((acc, curr) => acc + curr, 0);

			// Hiển thị tổng doanh thu
			document.getElementById('totalRevenue').textContent = `Total Revenue: ${totalRevenue.toFixed(2)}$`
		};

		const categoryManagerLink = document.getElementById('categoryManagerLink');

		categoryManagerLink.addEventListener("click", function (event) {
			event.preventDefault();
			fetch('/categoryscreen')
				.then(response => response.text())
				.then(data => {
					const mainContent = document.querySelector("#content main");
					mainContent.innerHTML = data;
					setcategory();
				})
				.catch(error => console.error('Đã xảy ra lỗi:', error));
		});

		function setcategory() {
			$(document).ready(function () {
				// Hiện dialog thêm thể loại khi bấm nút "Thêm thể loại"
				$("#addCategoryButton").click(function () {
					$("#addCategoryModal").modal("show");
				});

				// Hiện dialog sửa thể loại khi bấm nút "Edit" trong bảng danh sách thể loại
				$(".editCategoryButton").click(function () {
					// Lấy thông tin thể loại từ hàng bảng
					var categoryId = $(this).closest("tr").find("td:first").text();
					var categoryname = $(this).closest("tr").find("td:nth-child(2)").text();

					// Hiển thị thông tin thể loại trong modal sửa thể loại
					$("#editCategoryname").val(categoryname);

					// Đặt action của form sửa thể loại để gửi cập nhật đúng thể loại
					$("#editCategoryForm").attr("action", "/categoryput/" + categoryId);

					$("#editCategoryModal").modal("show");
				});

			});
		}
		const userManagerLink = document.getElementById('userManagerLink');
		userManagerLink.addEventListener("click", function (event) {
			event.preventDefault();
			fetch('/userscreen')
				.then(response => response.text())
				.then(data => {
					const mainContent = document.querySelector("#content main");
					mainContent.innerHTML = data;
					setuser();
				})
				.catch(error => console.error('Đã xảy ra lỗi:', error));
		});

		function setuser() {
			$(document).ready(function () {

				$("#addCategoryButton").click(function () {
					$("#addCategoryModal").modal("show");
				});


				$(".editCategoryButton").click(function () {

				 var id = $(this).closest("tr").find(".user-id").text();
                var username = $(this).closest("tr").find(".user-username").text();
                var phone = $(this).closest("tr").find(".user-phone").text();
                var role = $(this).closest("tr").find(".user-role").text();

                $("#editusername").val(username);
                $("#editphone").val(phone);
                $("#editrole").val(role);

					$("#editCategoryForm").attr("action", "/userput/" + id);

					$("#editCategoryModal").modal("show");
				});

        });
		}

		const notificationManagerLink = document.getElementById('notification');
		notificationManagerLink.addEventListener("click", function (event) {
			event.preventDefault();
			fetch('/rendernotifi')
				.then(response => response.text())
				.then(data => {
					const mainContent = document.querySelector("#content main");
					mainContent.innerHTML = data;
					setupMangaPage()
					mangasua()
					annut()
					chapDetail()
					chapDetailsua()
				})
				.catch(error => console.error('Đã xảy ra lỗi:', error));
		});


		fetch('/unread-count')
			.then(response => {
				if (!response.ok) {
					throw new Error(`HTTP error! Status: ${response.status}`);
				}
				return response.json();
			})
			.then(data => {
				// Cập nhật số lượng thông báo chưa đọc trong thẻ span
				const notificationSpan = document.querySelector('.num');
				notificationSpan.innerText = data.unreadCount.toString();
			})
			.catch(error => console.error(error));

		function setupMangaPage() {
			const mangaDetailButtons = document.querySelectorAll('.manga-detail-button');

			mangaDetailButtons.forEach(button => {

				button.addEventListener('click', function (event) {
					const mangaId = this.getAttribute('data-manga-id');
					fetch(`/manganotifi/${mangaId}`)
						.then(response => response.json())
						.then(data => {
							if (data) {
								// Hiển thị thông tin chi tiết truyện trong modal
								document.getElementById('mangaDetailImage').src = data.image;
								document.getElementById('mangaDetailCategory').textContent = `Thể loại : ${data.category}`;
								document.getElementById('mangaDetailContent').textContent = `Nội dung: ${data.content}`;
								document.getElementById('mangaDetailAuthor').textContent = `Tác giả: ${data.author}`;
								document.getElementById('mangaDetailmanganame').textContent = `${data.manganame}`;
								// Các trường thông tin khác nếu có

								// Kích hoạt modal
								$('#mangaDetailModal').modal('show');
							} else {
								alert('Không có thông tin chi tiết cho truyện này.');
							}
						})
						.catch(error => {
							console.error('Lỗi khi lấy chi tiết truyện:', error);
							alert('Đã xảy ra lỗi khi lấy chi tiết truyện.');
						});
				});
			});
		}
		function annut() {
			$(document).ready(function () {
				$('.huymangaButton').click(function () {
					$('#huymangaModal').modal('show');
				});
				$('.huysuamangaButton').click(function () {
					$('#huysuamangaModal').modal('show');
				});
				$('.huychapButton').click(function () {
					$('#huychapModal').modal('show');
				});
				$('.huysuachapButton').click(function () {
					$('#huysuachapModal').modal('show');
				});
			})

			const approveMangaButtons = document.querySelectorAll('.approveMangaButton');
			const approveChapButtons = document.querySelectorAll('.approveChapButton');
			const approvesuatruyen = document.querySelectorAll('.approvesuatruyen');
			const approvesuachap = document.querySelectorAll('.approvesuachap');
			const titleCells = document.querySelectorAll('.titleCell');
			const mangaSuaDetailButtons = document.querySelectorAll('.mangasua-detail-button');
			const mangaDetailButtons = document.querySelectorAll('.manga-detail-button');
			const chapSuaDetailButtons = document.querySelectorAll('.chapsua-detail-button');
			const chapDetailButtons = document.querySelectorAll('.chap-detail-button');
			const huymangaButton = document.querySelectorAll('.huymangaButton');
			const huychapButton = document.querySelectorAll('.huychapButton');
			const huysuachapButton = document.querySelectorAll('.huysuachapButton');
			const huysuamangaButton = document.querySelectorAll('.huysuamangaButton');

			approveMangaButtons.forEach((button, index) => {
				const title = titleCells[index].textContent.trim();
				if (title === 'Duyệt thêm chap' || title === 'Duyệt sửa truyện' || title === 'Duyệt sửa chap') {
					button.style.display = 'none';
				}
			});

			approveChapButtons.forEach((button, index) => {
				const title = titleCells[index].textContent.trim();
				if (title === 'Duyệt thêm truyện' || title === 'Duyệt sửa truyện' || title === 'Duyệt sửa chap') {
					button.style.display = 'none';
				}
			});

			approvesuatruyen.forEach((button, index) => {
				const title = titleCells[index].textContent.trim();
				if (title === 'Duyệt thêm truyện' || title === 'Duyệt thêm chap' || title === 'Duyệt sửa chap') {
					button.style.display = 'none';
				}
			});
			approvesuachap.forEach((button, index) => {
				const title = titleCells[index].textContent.trim();
				if (title === 'Duyệt thêm truyện' || title === 'Duyệt thêm chap' || title === 'Duyệt sửa truyện') {
					button.style.display = 'none';
				}
			});

			mangaSuaDetailButtons.forEach((button, index) => {
				const title = titleCells[index].textContent.trim();
				if (title === 'Duyệt thêm truyện' || title === 'Duyệt thêm chap' || title === 'Duyệt sửa chap') {
					button.style.display = 'none';
				}
			});

			mangaDetailButtons.forEach((button, index) => {
				const title = titleCells[index].textContent.trim();
				if (title === 'Duyệt thêm chap' || title === 'Duyệt sửa truyện' || title === 'Duyệt sửa chap') {
					button.style.display = 'none';
				}
			});
			chapSuaDetailButtons.forEach((button, index) => {
				const title = titleCells[index].textContent.trim();
				if (title === 'Duyệt thêm truyện' || title === 'Duyệt thêm chap' || title === 'Duyệt sửa truyện') {
					button.style.display = 'none';
				}
			});

			chapDetailButtons.forEach((button, index) => {
				const title = titleCells[index].textContent.trim();
				if (title === 'Duyệt thêm truyện' || title === 'Duyệt sửa truyện' || title === 'Duyệt sửa chap') {
					button.style.display = 'none';
				}
			});

			huysuamangaButton.forEach((button, index) => {
				const title = titleCells[index].textContent.trim();
				if (title === 'Duyệt thêm truyện' || title === 'Duyệt thêm chap' || title === 'Duyệt sửa chap') {
					button.style.display = 'none';
				}
			});

			huymangaButton.forEach((button, index) => {
				const title = titleCells[index].textContent.trim();
				if (title === 'Duyệt thêm chap' || title === 'Duyệt sửa truyện' || title === 'Duyệt sửa chap') {
					button.style.display = 'none';
				}
			});
			huysuachapButton.forEach((button, index) => {
				const title = titleCells[index].textContent.trim();
				if (title === 'Duyệt thêm truyện' || title === 'Duyệt thêm chap' || title === 'Duyệt sửa truyện') {
					button.style.display = 'none';
				}
			});

			huychapButton.forEach((button, index) => {
				const title = titleCells[index].textContent.trim();
				if (title === 'Duyệt thêm truyện' || title === 'Duyệt sửa truyện' || title === 'Duyệt sửa chap') {
					button.style.display = 'none';
				}
			});
		}

		function mangasua() {

			const mangaSuaDetailButtons = document.querySelectorAll('.mangasua-detail-button');

			mangaSuaDetailButtons.forEach(button => {
				button.addEventListener('click', function (event) {
					const mangaId = this.getAttribute('data-manga-id');
					fetch(`/manganotifysua/${mangaId}`)
						.then(response => response.json())
						.then(data => {
							if (data) {
								// Hiển thị thông tin chi tiết sửa truyện trong modal
								document.getElementById('mangaDetailImage').src = data.image;
								document.getElementById('mangaDetailCategory').textContent = `Thể loại : ${data.category}`;
								document.getElementById('mangaDetailAuthor').textContent = `Tác giả : ${data.author}`;
								document.getElementById('mangaDetailmanganame').textContent = `${data.manganame}`;
								document.getElementById('mangaDetailContent').textContent = `Nội dung: ${data.content}`;
								// Các trường thông tin khác nếu có

								// Kích hoạt modal
								$('#mangaDetailModal').modal('show');
							} else {
								alert('Không có thông tin chi tiết sửa cho truyện này.');
							}
						})
						.catch(error => {
							console.error('Lỗi khi lấy chi tiết sửa truyện:', error);
							alert('Đã xảy ra lỗi khi lấy chi tiết sửa truyện.');
						});
				});
			});
		}

		function chapDetail() {
			const chapDetailButtons = document.querySelectorAll('.chap-detail-button');

			chapDetailButtons.forEach(button => {
				button.addEventListener('click', function (event) {
					const mangaId = this.getAttribute('data-manga-id');
					fetch(`/chapternotify/${mangaId}`)
						.then(response => response.json())
						.then(data => {
							if (data) {
								// Hiển thị thông tin chi tiết chap trong modal mới
								document.getElementById('chapDetailMangaNameAndNumber').textContent = `Chap ${data.number} - Truyện ${data.mangaName}`;
								document.getElementById('chapDetailVipOrFreeAndPrice').textContent = `${data.viporfree} - price: ${data.price} coin`;
								const imagesContainer = document.getElementById('chapDetailImages');
								imagesContainer.innerHTML = ""; // Xóa nội dung cũ
								data.images.forEach(imageSrc => {
									const imgElement = document.createElement('img');
									imgElement.src = imageSrc;
									imgElement.style.width = '500px'; // Đảm bảo chiều rộng không vượt quá 100%
									imgElement.style.height = '500px';
									imgElement.style.borderRadius = '0';
									imgElement.style.margin = '0 auto'
									imgElement.style.maxWidth = '100%'
									imagesContainer.appendChild(imgElement);
								});
								// Kích hoạt modal mới
								$('#chapDetailModal').modal('show');
							} else {
								alert('Không có thông tin chi tiết cho chap này.');
							}
						})
						.catch(error => {
							console.error('Lỗi khi lấy chi tiết chap:', error);
							alert('Đã xảy ra lỗi khi lấy chi tiết chap.');
						});
				});
			});
		}
		function chapDetailsua() {
			const chapDetailButtons = document.querySelectorAll('.chapsua-detail-button');

			chapDetailButtons.forEach(button => {
				button.addEventListener('click', function (event) {
					const mangaId = this.getAttribute('data-manga-id');
					fetch(`/chapternotifysua/${mangaId}`)
						.then(response => response.json())
						.then(data => {
							if (data) {
								// Hiển thị thông tin chi tiết chap trong modal mới
								document.getElementById('chapDetailMangaNameAndNumber').textContent = `Chap ${data.number} - Truyện ${data.mangaName}`;
								document.getElementById('chapDetailVipOrFreeAndPrice').textContent = `${data.viporfree} - price: ${data.price} coin`;
								const imagesContainer = document.getElementById('chapDetailImages');
								imagesContainer.innerHTML = ""; // Xóa nội dung cũ
								data.images.forEach(imageSrc => {
									const imgElement = document.createElement('img');
									imgElement.src = imageSrc;
									imgElement.style.width = '500px'; // Đảm bảo chiều rộng không vượt quá 100%
									imgElement.style.height = '500px';
									imgElement.style.borderRadius = '0';
									imgElement.style.margin = '0 auto'
									imgElement.style.maxWidth = '100%'
									imagesContainer.appendChild(imgElement);
								});
								// Kích hoạt modal mới
								$('#chapDetailModal').modal('show');
							} else {
								alert('Không có thông tin chi tiết cho chap này.');
							}
						})
						.catch(error => {
							console.error('Lỗi khi lấy chi tiết chap:', error);
							alert('Đã xảy ra lỗi khi lấy chi tiết chap.');
						});
				});
			});
		}
	</script>
</body>

</html>